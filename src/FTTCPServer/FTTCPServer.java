package FTTCPServer;
/**
 * FTTCPServer - servidor em TCP para transferencia de ficheiros
 * para um cliente TCP.
 */

import Utils.CryptoStuff;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.file.Files;

public class FTTCPServer {

    static final int BLOCKSIZE = 1024;
    public static final int PORT = 8080;
    static final String KEYRING = "keyring";

    /**
     * Gets the SecureKey
     *
     * @return key in keyring file generated by FTTCPClient.GenerateKey
     * @throws IOException
     */
    public static String getKey() throws IOException {
        File keyring = new File(KEYRING);
        return new String(Files.readAllBytes(keyring.toPath().toAbsolutePath()));
    }

    /**
     * @param args
     */
    public static void main(String[] args) throws Exception {

        ServerSocket serverSocket = new ServerSocket(PORT);

        for (; ; ) {
            System.out.println("Server ready at port " + PORT);

            Socket clientSocket = serverSocket.accept();
            InputStream is = clientSocket.getInputStream();

            int n;
            byte[] buf = new byte[BLOCKSIZE];

            for (n = 0; n < BLOCKSIZE; n++) {
                // file name sent by client
                int s = is.read();
                if (s != -1) buf[n] = (byte) s;
                else System.exit(1);
                if (buf[n] == 0) break;
            }
            String filename = new String(buf, 0, n);
            System.out.println("Receiving: '" + new String(buf, 0, n) + "'");
            System.out.println("Receiving: " + filename);

            FileOutputStream f = new FileOutputStream(new String(buf, 0, n));
            // FileOutputStream f = new FileOutputStream("tmp.out");

            // Instrumentation for transfer statstics
            long startime = System.currentTimeMillis();
            int count = 0;
            while ((n = is.read(buf)) > 0) {
                // write the received blocks
                count = count + n;
                byte[] decryptedBuf = CryptoStuff.decrypt(getKey(), buf);
                f.write(decryptedBuf, 0, n);
            }

            // Instrumentation for transfer statstics
            long endtime = System.currentTimeMillis();

            clientSocket.close();
            // close file
            f.close();

            // Transfer statistics observed by server
            count = 8 * count / 1000;
            System.out.println("Throughput: " + count / (endtime - startime) + " Kbits/s");

        }
    }
}
